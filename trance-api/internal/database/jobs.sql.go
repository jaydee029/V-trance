// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: jobs.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJob = `-- name: CreateJob :one
INSERT INTO jobs(Job_id,Video_id,Name,Type, Options, Status, Created_at) VALUES($1,$2,$3,$4,$5,$6,$7)
RETURNING Name, Job_id, Video_id
`

type CreateJobParams struct {
	JobID     pgtype.UUID
	VideoID   pgtype.UUID
	Name      string
	Type      string
	Options   []byte
	Status    string
	CreatedAt pgtype.Timestamp
}

type CreateJobRow struct {
	Name    string
	JobID   pgtype.UUID
	VideoID pgtype.UUID
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (CreateJobRow, error) {
	row := q.db.QueryRow(ctx, createJob,
		arg.JobID,
		arg.VideoID,
		arg.Name,
		arg.Type,
		arg.Options,
		arg.Status,
		arg.CreatedAt,
	)
	var i CreateJobRow
	err := row.Scan(&i.Name, &i.JobID, &i.VideoID)
	return i, err
}

const fetchStatus = `-- name: FetchStatus :one
SELECT Name, Video_id, Status FROM jobs WHERE Job_id=$1
`

type FetchStatusRow struct {
	Name    string
	VideoID pgtype.UUID
	Status  string
}

func (q *Queries) FetchStatus(ctx context.Context, jobID pgtype.UUID) (FetchStatusRow, error) {
	row := q.db.QueryRow(ctx, fetchStatus, jobID)
	var i FetchStatusRow
	err := row.Scan(&i.Name, &i.VideoID, &i.Status)
	return i, err
}
