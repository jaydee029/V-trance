// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(name,Email,passwd,id,created_at,username) VALUES($1,$2,$3,$4,$5,$6)
RETURNING name, email, passwd, username, id, created_at
`

type CreateUserParams struct {
	Name      string
	Email     string
	Passwd    []byte
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamp
	Username  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Passwd,
		arg.ID,
		arg.CreatedAt,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.Passwd,
		&i.Username,
		&i.ID,
		&i.CreatedAt,
	)
	return i, err
}

const getUserEmail = `-- name: GetUserEmail :one
SELECT name, email, passwd, username, id, created_at FROM users WHERE Email=$1
`

func (q *Queries) GetUserEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserEmail, email)
	var i User
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.Passwd,
		&i.Username,
		&i.ID,
		&i.CreatedAt,
	)
	return i, err
}

const getUserUsername = `-- name: GetUserUsername :one
SELECT name, email, passwd, username, id, created_at FROM users WHERE username=$1
`

func (q *Queries) GetUserUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserUsername, username)
	var i User
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.Passwd,
		&i.Username,
		&i.ID,
		&i.CreatedAt,
	)
	return i, err
}

const is_Email = `-- name: Is_Email :one
SELECT EXISTS (SELECT 1 FROM users WHERE Email=$1) AS value_exists
`

func (q *Queries) Is_Email(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, is_Email, email)
	var value_exists bool
	err := row.Scan(&value_exists)
	return value_exists, err
}

const is_Username = `-- name: Is_Username :one
SELECT EXISTS (SELECT 1 FROM users WHERE username=$1) AS value_exists
`

func (q *Queries) Is_Username(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, is_Username, username)
	var value_exists bool
	err := row.Scan(&value_exists)
	return value_exists, err
}
