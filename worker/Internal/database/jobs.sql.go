// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: jobs.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const fetchJob = `-- name: FetchJob :one
SELECT Video_id,Name,Type,Options From jobs WHERE Job_id=$1 AND Status=$2
`

type FetchJobParams struct {
	JobID  pgtype.UUID
	Status string
}

type FetchJobRow struct {
	VideoID pgtype.UUID
	Name    string
	Type    string
	Options []byte
}

func (q *Queries) FetchJob(ctx context.Context, arg FetchJobParams) (FetchJobRow, error) {
	row := q.db.QueryRow(ctx, fetchJob, arg.JobID, arg.Status)
	var i FetchJobRow
	err := row.Scan(
		&i.VideoID,
		&i.Name,
		&i.Type,
		&i.Options,
	)
	return i, err
}

const setStatusProcessing = `-- name: SetStatusProcessing :one
UPDATE jobs SET Status=$1 WHERE Job_id=$2
RETURNING job_id, video_id, name, type, options, status, created_at
`

type SetStatusProcessingParams struct {
	Status string
	JobID  pgtype.UUID
}

func (q *Queries) SetStatusProcessing(ctx context.Context, arg SetStatusProcessingParams) (Job, error) {
	row := q.db.QueryRow(ctx, setStatusProcessing, arg.Status, arg.JobID)
	var i Job
	err := row.Scan(
		&i.JobID,
		&i.VideoID,
		&i.Name,
		&i.Type,
		&i.Options,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
